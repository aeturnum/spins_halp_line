import subprocess
import json

from hypercorn.config import Config
from hypercorn.trio import serve
from quart_trio import QuartTrio
from quart import request, websocket, jsonify
import trio_asyncio
import trio
from functools import partial

from trio import MemoryReceiveChannel

from spins_halp_line.tasks import work_queue, GitUpdate
from spins_halp_line.twil import t_resp, TwilRequest
from spins_halp_line.util import do_monkey_patches, get_logger
from spins_halp_line.stories.story_objects import Script, confused_response
from spins_halp_line.stories.shipwreck_adventure import adventure
from spins_halp_line.events import event_websocket, send_event
from spins_halp_line.player import Player

Script.add_script(adventure)

do_monkey_patches()

app = QuartTrio(__name__)
config = Config.from_toml("./hypercorn.toml")
add_task, get_task = trio.open_memory_channel(50)

message = subprocess.run(['git', 'log', '-1', '--pretty=%B'], capture_output=True)
message = message.stdout.decode()

log = get_logger()


@app.route('/')
async def hello():
    await send_event(f"returning home page!")
    # server is up
    return f"""
    <head>
        <script src="https://cdn.jsdelivr.net/npm/umbrellajs"></script>
    </head>
    <body>
        <p>{message}</p>
        <div id="events"></div>
        <script>
            this.socket = new WebSocket(`wss://${{document.domain}}/events/ws`)

            this.socket.addEventListener("message", (event) => {{
                u('#events').append(`<pre>${{event.data}}</pre>`)
            }})

        </script>
    </body>
    """

@app.websocket('/events/ws')
@event_websocket
async def events(read_channel: MemoryReceiveChannel):
    while True:
        message = await read_channel.receive()
        await websocket.send(message)

# ascii text generated by: https://www.kammerl.de/ascii/AsciiSignature.php ("big" font)
#  _______       _ _ _         ______           _             _       _
# |__   __|     (_) (_)       |  ____|         | |           (_)     | |
#    | |_      ___| |_  ___   | |__   _ __   __| |_ __   ___  _ _ __ | |_ ___
#    | \ \ /\ / / | | |/ _ \  |  __| | '_ \ / _` | '_ \ / _ \| | '_ \| __/ __|
#    | |\ V  V /| | | | (_) | | |____| | | | (_| | |_) | (_) | | | | | |_\__ \
#    |_| \_/\_/ |_|_|_|\___/  |______|_| |_|\__,_| .__/ \___/|_|_| |_|\__|___/
#                                                | |
#                                                |_|


# much thanks to https://github.com/TwilioDevEd/ivr-phone-tree-python/blob/master/ivr_phone_tree_python/views.py
@app.route("/tipline/start", methods=['GET', 'POST'])
async def main_number():
    req = TwilRequest(request)
    response = None

    await req.load()

    # players already in a game
    # todo: improve this system
    for script in Script.Active_Scripts:
        if await script.player_playing(req):
            response = await script.play(req)
            break

    # start a new game
    if not response:
        for script in Script.Active_Scripts:
            if await script.call_could_start_game(req):
                response = await script.play(req)
                break

    if not response:
        response = confused_response()

    # save any state changes we recorded
    await req.player.save()

    return t_resp(response)
#
#  _____       _                       _               ______           _             _       _
# |  __ \     | |                     (_)             |  ____|         | |           (_)     | |
# | |  | | ___| |__  _   _  __ _  __ _ _ _ __   __ _  | |__   _ __   __| |_ __   ___  _ _ __ | |_ ___
# | |  | |/ _ \ '_ \| | | |/ _` |/ _` | | '_ \ / _` | |  __| | '_ \ / _` | '_ \ / _ \| | '_ \| __/ __|
# | |__| |  __/ |_) | |_| | (_| | (_| | | | | | (_| | | |____| | | | (_| | |_) | (_) | | | | | |_\__ \
# |_____/ \___|_.__/ \__,_|\__, |\__, |_|_| |_|\__, | |______|_| |_|\__,_| .__/ \___/|_|_| |_|\__|___/
#                           __/ | __/ |         __/ |                    | |
#                          |___/ |___/         |___/                     |_|

@app.route("/debug", methods=["GET"])
async def debug_interface():
    return f"""
        <head>
            <link rel="stylesheet" type="text/css" href="/css/jsonview.bundle.css">
            <link rel="stylesheet" type="text/css" href="/css/main.css">
            <script src="/js/jsonview.bundle.js"></script>
            <script src="/js/umbrella.min.js"></script>
        </head>
        <body>
            <main class="wrapper">
                <div class="left">
                    <table id="players">
                    </table>
                </div>
                <div class="right" id="json"></div>
            </main>
        <script>
            function displayThisJson(data, player_id) {{
                return () => {{
                    let this_data = data[player_id];
                    const tree = JsonView.renderJSON(this_data, document.querySelector('#json'));
                    JsonView.expandChildren(tree); // Expand tree after rendering		
                }}
            }}
            
            function deletePlayer(friendly_key) {{
                fetch(`/players/${{friendly_key}}` {{method: 'DELETE'}});
            }}
            
            function setupTableHead(table) {{
                let tHead = table.createTHead();
                let row = tHead.insertRow();
                let th = document.createElement("th");
                th.appendChild(document.createTextNode("Players"));
                th.appendChild(document.createTextNode("Delete"));
                row.appendChild(th);
            }}
            
            function setupTableRow(key, table) {{
                let friendly_key = key.substring(5); // remove plr:+
            
                let row = table.insertRow();
                // display info
                let cell = row.insertCell();
                let displayInfo = document.createElement("input");
                displayInfo.type = "button";
                displayInfo.value = `View ${{friendly_key}}`;
                displayInfo.onclick = displayThisJson(data, key);
                cell.appendChild(displayInfo);
            
                let cell = row.insertCell();
                let deleteButton = document.createElement("input");
                deleteButton.type = "button";
                deleteButton.value = `Delete ${{friendly_key}}`;
                deleteButton.onclick = deletePlayer(friendly_key);
                cell.appendChild(deleteButton);
            }}
            
            function setupTable(data) {{
                let table = u("#players").nodes[0];
                setupTableHead(table);
                for (let key of Object.keys(data)) {{
                        
                }}
            }}

        fetch('/players').then(res => res.json()).then(data => setupTable(data));
        </script>
        </body>
        """

@app.route("/players", methods=['GET'])
async def list_players():
    return jsonify(await Player.get_all_json())
    # Who needs a template library?


@app.route("/players/<p_num>", methods=['DELETE'])
async def delete_player(p_num):
    return await Player.reset(Player.from_number(p_num))
#   _____ _ _     ______           _             _       _
#  / ____(_) |   |  ____|         | |           (_)     | |
# | |  __ _| |_  | |__   _ __   __| |_ __   ___  _ _ __ | |_ ___
# | | |_ | | __| |  __| | '_ \ / _` | '_ \ / _ \| | '_ \| __/ __|
# | |__| | | |_  | |____| | | | (_| | |_) | (_) | | | | | |_\__ \
#  \_____|_|\__| |______|_| |_|\__,_| .__/ \___/|_|_| |_|\__|___/
#                                   | |
#                                   |_|
#


# https://support.glitch.com/t/tutorial-how-to-auto-update-your-project-with-github/8124
@app.route("/git", methods=['POST'])
async def pull_git():
    if request.headers['x-github-event'] == "push":
        print("Git repo updateing, pulling changes")
        await add_task.send(GitUpdate())
    return ""


#   _____                            ____        _ _            _
#  / ____|                          |  _ \      | | |          | |
# | (___   ___ _ ____   _____ _ __  | |_) | ___ | | | ___   ___| | _____
#  \___ \ / _ \ '__\ \ / / _ \ '__| |  _ < / _ \| | |/ _ \ / __| |/ / __|
#  ____) |  __/ |   \ V /  __/ |    | |_) | (_) | | | (_) | (__|   <\__ \
# |_____/ \___|_|    \_/ \___|_|    |____/ \___/|_|_|\___/ \___|_|\_\___/

async def async_layer():
    async with trio_asyncio.open_loop():
        async with trio.open_nursery() as nurse:
            # start our own
            nurse.start_soon(partial(serve, app, config))
            nurse.start_soon(work_queue, get_task)

trio_asyncio.run(async_layer)
